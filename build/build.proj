<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <Configuration>Debug</Configuration>

    <!-- Note: We won't start using semver until v2 -->
    <PrereleaseTag Condition=" '$(bamboo_GitVersion_BuildMetadata)' != '' ">-beta$(bamboo_GitVersion_BuildMetadata)</PrereleaseTag>
    <PrereleaseTag Condition=" '$(bamboo_GitVersion_BuildMetadata)' == '' ">-SNAPSHOT</PrereleaseTag>
    <Version>1.5.1$(PrereleaseTag)</Version>

    <ILMerge>$(MSBuildThisFileDirectory.Replace('build\','src'))\packages\ILMerge.2.14.1208\tools\ILMerge.exe</ILMerge>
    <NuGet>$(LocalAppData)\NuGet\NuGet.exe</NuGet>
    <MSBuild>&quot;$(MSBuildToolsPath)\MSBuild.exe&quot;</MSBuild>
    <XUnit>$(MSBuildThisFileDirectory.Replace('build\','src'))\packages\xunit.runner.console.2.0.0\tools\xunit.console.exe</XUnit>
    <XUnitXslt>$(MSBuildThisFileDirectory.Replace('build\','src'))\packages\xunit.runner.console.2.0.0\tools\NUnitXml.xslt</XUnitXslt>
  </PropertyGroup>

  <Target Name="CI">
    <PropertyGroup>
      <Configuration>Release</Configuration>
    </PropertyGroup>

    <CallTarget Targets="Build" />
    <CallTarget Targets="Documentation" />
    <CallTarget Targets="UnitTest" />
    <CallTarget Targets="IntegrationTest" />
    <CallTarget Targets="Package" />
  </Target>

  <Target Name="Build" DependsOnTargets="RestorePackages">
    <Message Text="Building version $(Version)..." />
    <Exec Command="$(MSBuild) ..\src\openstack.net.sln /p:Configuration=$(Configuration) /nologo /v:minimal" />
  </Target>

  <Target Name="Documentation" DependsOnTargets="Build">
    <PropertyGroup>
      <SHFBROOT>$(MSBuildThisFileDirectory.Replace('build\','src'))\packages\EWSoftware.SHFB.2014.11.22-beta\tools</SHFBROOT>
    </PropertyGroup>

    <Exec Command="$(NuGet) restore ..\src\Documentation\Documentation.sln" />
    <Exec Command="(set SHFBROOT=$(SHFBROOT)) &amp; $(MSBuild) ..\src\Documentation\Documentation.sln /p:Configuration=$(Configuration) /nologo /v:minimal" />
  </Target>

  <Target Name="RestorePackages" DependsOnTargets="DownloadNuGet">
    <Exec Command="$(NuGet) restore ..\src\openstack.net.sln" />
  </Target>

  <Target Name="DownloadNuGet" Condition="!Exists('$(NuGet)')">
    <MakeDir Directories="$(LocalAppData)\NuGet" />
    <Exec Command="@powershell -NoProfile -ExecutionPolicy unrestricted -Command &quot;$ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest 'https://www.nuget.org/nuget.exe' -OutFile '$(NuGet)'&quot;" />
  </Target>

  <Target Name="UnitTest" DependsOnTargets="Build">
    <PropertyGroup>
      <MSTest Condition=" '$(VS140COMNTOOLS)' != '' ">&quot;$(VS140COMNTOOLS)..\IDE\MSTest.exe&quot;</MSTest>
      <MSTest Condition=" '$(VS120COMNTOOLS)' != '' ">&quot;$(VS120COMNTOOLS)..\IDE\MSTest.exe&quot;</MSTest>
    </PropertyGroup>

    <RemoveDir Directories="..\artifacts\TestResults\" />
    <MakeDir Directories="..\artifacts\TestResults\" />
    <Exec Command="$(XUnit) ..\src\testing\unit\bin\$(Configuration)\OpenStackNet.Testing.Unit.dll -nunit ..\artifacts\TestResults\unit-tests.nunit.xml" ContinueOnError="true" />
    <Exec Command="$(MSTest) /testcontainer:..\src\testing\unit\bin\$(Configuration)\OpenStackNet.Testing.Unit.dll /category:Unit /resultsfile:..\artifacts\TestResults\unit.trx" ContinueOnError="true" />
  </Target>

  <Target Name="IntegrationTest" DependsOnTargets="Build">
    <MakeDir Directories="..\artifacts\TestResults\" />
    <Exec Command="$(XUnit) ..\src\testing\integration\bin\$(Configuration)\OpenStackNet.Testing.Integration.dll -xml ..\artifacts\TestResults\integration-tests.xml -notrait ci=false" ContinueOnError="true" />

    <!-- Convert test results to the NUnit format for easier reporting -->
    <XslTransformation XmlInputPaths="..\artifacts\TestResults\integration-tests.xml"  XslInputPath="$(XUnitXslt)"
      OutputPaths="..\artifacts\TestResults\integration-tests.nunit.xml" />
  </Target>

  <Target Name="Package" DependsOnTargets="Build;Documentation">
    <MakeDir Directories="..\src\corelib\bin\v4.0\$(Configuration)\deploy" />
    <Exec Command="$(ILMerge) /t:library /v4 /out:deploy/openstacknet.dll openstacknet.dll SimpleRESTServices.dll"
          WorkingDirectory="..\src\corelib\bin\v4.0\$(Configuration)" />

    <MakeDir Directories="..\artifacts\packages\" />
    <Exec Command="$(NuGet) pack ..\src\corelib\corelib.nuspec -OutputDirectory ..\artifacts\packages -Prop Configuration=$(Configuration) -Version $(Version)" />
  </Target>

  <!-- The publish targets don't depend upon Package because of how they are used on the CI server. At this point the code has been packaged and all that needs
       to happen is to publish the artifact. -->
  <Target Name="PublishNuGet" DependsOnTargets="DownloadNuGet">
    <Exec Command="@powershell -NoProfile -ExecutionPolicy unrestricted -File check-nuget-version-exists.ps1 $(Version)" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="ShouldPublishToNuGet" />
    </Exec>

    <!-- The environment variable BAMBOO_NUGET_PASSWORD comes from the nuget.password variable defined on the openstack.net plan in Bamboo -->
    <Message Text="Skipping publish to NuGet because version $(Version) has already been published."
          Condition=" '$(ShouldPublishToNuGet)' == 'False' " />
    <Exec Command="$(NuGet) push ..\artifacts\packages\openstack.net.$(Version).nupkg %25BAMBOO_NUGET_PASSWORD%25"
          Condition=" '$(ShouldPublishToNuGet)' == 'True' " />
  </Target>

  <Target Name="PublishMyGet" DependsOnTargets="DownloadNuGet">
    <!-- We don't need to check for existing versions because MyGet lets you overwrite -->
    <!-- The environment variable BAMBOO_MYGET_PASSWORD comes from the nuget.password variable defined on the openstack.net plan in Bamboo -->
    <Exec Command="$(NuGet) push ..\artifacts\packages\openstack.net.$(Version).nupkg %25BAMBOO_MYGET_PASSWORD%25 -Source https://www.myget.org/F/openstacknetsdk/api/v2"/>
  </Target>

</Project>
